// flow-typed signature: 2d57d3df5ef25ccfb2d1c3b0a6af808b
// flow-typed version: <<STUB>>/redux-loop_v^2.2.2/flow_v0.38.0
import type { StoreEnhancer } from 'redux';

/**
 * This is an autogenerated libdef stub for:
 *
 *   'redux-loop'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

 /*
 * S = State
 * K = Key
 * A = Action
 * V = Value
 * M = Model
 * E = Effect
 */

 declare module 'redux-loop' {
   // declare module.exports: any;
   declare function loop<M, E>(
     model: M,
     effect: E,
   ): M;
  //  ): [M, E];

   declare function isLoop(array: Array<any>): Boolean;

   declare function getEffect<M>(loop: any): ?M;

   declare function combineReducers<S, K, V, A>(
     reducerMap: Object,
     rootState?: Object,
     accessor?: (state: S, key: K) => S,
     mutator?: (state: S, key: K, value: V) => S,
   ): (state: S, action: A) => loop<*, *>;

   declare type Action = {
     type: string,
   }

   declare function liftState<S>(
     state: S
   ): S | loop<*, *>;

   declare function getModel(
     loop: any
   ): loop<*, *>;

   declare function isEffect(object: Object): Boolean;
   declare function isNone(object: Object): Boolean;
   declare function none(): Object;

   declare function promise(factory: Function, ...args?: any): Object;

   declare function call(factory: Function, ...args?: any): Object;
   declare function batch(effects: Array<any>): Object;
   declare function constant(action: Action): Object; // { action, type: string };
   declare function lift(effect: Object, factory: Function, ...args?: any): Object;

   declare function effectToPromise(effect: Object): Promise<*>;

   declare function install<S, A>(): StoreEnhancer;

   declare class Effects {
     static constant: constant,
     static promise: promise,
     static call: call,
     static batch: batch,
     static none: none,
     static lift: lift,
   }
 }
